{"/home/travis/build/npmtest/node-npmtest-uglifycss/test.js":"/* istanbul instrument in package npmtest_uglifycss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-uglifycss/lib.npmtest_uglifycss.js":"/* istanbul instrument in package npmtest_uglifycss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_uglifycss = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_uglifycss = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-uglifycss/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-uglifycss && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_uglifycss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_uglifycss\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_uglifycss.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_uglifycss.rollup.js'] =\n            local.assetsDict['/assets.npmtest_uglifycss.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_uglifycss.__dirname +\n                    '/lib.npmtest_uglifycss.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-uglifycss/node_modules/uglifycss/index.js":"/**\n * UglifyCSS\n * Port of YUI CSS Compressor to NodeJS\n * Author: Franck Marcia - https://github.com/fmarcia\n * MIT licenced\n */\n\n/**\n * cssmin.js\n * Author: Stoyan Stefanov - http://phpied.com/\n * This is a JavaScript port of the CSS minification tool\n * distributed with YUICompressor, itself a port\n * of the cssmin utility by Isaac Schlueter - http://foohack.com/\n * Permission is hereby granted to use the JavaScript version under the same\n * conditions as the YUICompressor (original YUICompressor note below).\n */\n\n/**\n * YUI Compressor\n * http://developer.yahoo.com/yui/compressor/\n * Author: Julien Lecomte - http://www.julienlecomte.net/\n * Copyright (c) 2011 Yahoo! Inc. All rights reserved.\n * The copyrights embodied in the content of this file are licensed\n * by Yahoo! Inc. under the BSD (revised) open source license.\n */\n\nmodule.exports = require('./uglifycss-lib');\n","/home/travis/build/npmtest/node-npmtest-uglifycss/node_modules/uglifycss/uglifycss-lib.js":"/**\n * UglifyCSS\n * Port of YUI CSS Compressor to NodeJS\n * Author: Franck Marcia - https://github.com/fmarcia\n * MIT licenced\n */\n\n/**\n * cssmin.js\n * Author: Stoyan Stefanov - http://phpied.com/\n * This is a JavaScript port of the CSS minification tool\n * distributed with YUICompressor, itself a port\n * of the cssmin utility by Isaac Schlueter - http://foohack.com/\n * Permission is hereby granted to use the JavaScript version under the same\n * conditions as the YUICompressor (original YUICompressor note below).\n */\n\n/**\n * YUI Compressor\n * http://developer.yahoo.com/yui/compressor/\n * Author: Julien Lecomte - http://www.julienlecomte.net/\n * Copyright (c) 2011 Yahoo! Inc. All rights reserved.\n * The copyrights embodied in the content of this file are licensed\n * by Yahoo! Inc. under the BSD (revised) open source license.\n */\n\n'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\n\nvar SEP = \"/\";\nvar PATH_SEP = path.sep;\nvar ___PRESERVED_TOKEN_ = \"___PRESERVED_TOKEN_\";\n\nvar defaultOptions = {\n    maxLineLen: 0,\n    expandVars: false,\n    uglyComments: false,\n    cuteComments: false,\n    convertUrls: \"\",\n    debug: false\n};\n\n/**\n * Utility method to convert relative urls and replace them with tokens before\n * we start compressing. It must be called *after* extractDataUrls\n *\n * @private\n * @function convertRelativeUrls\n * @param {String} css The input css\n * @param {Object} options Options\n * @param {Array} The global array of tokens to preserve\n * @returns String The processed css\n */\nfunction convertRelativeUrls(css, options, preservedTokens) {\n\n    var maxIndex = css.length - 1,\n        appendIndex = 0,\n        startIndex,\n        endIndex,\n        terminator,\n        foundTerminator,\n        sb = [],\n        m,\n        preserver,\n        token,\n        url,\n        file,\n        target,\n        pattern = /(url\\s*\\()\\s*([\"']?)/g;\n\n    // Since we need to account for non-base64 data urls, we need to handle\n    // ' and ) being part of the data string. Hence switching to indexOf,\n    // to determine whether or not we have matching string terminators and\n    // handling sb appends directly, instead of using matcher.append* methods.\n\n    while ((m = pattern.exec(css)) !== null) {\n\n        startIndex = m.index + m[1].length;  // \"url(\".length()\n        terminator = m[2];         // ', \" or empty (not quoted)\n\n        if (terminator.length === 0) {\n            terminator = \")\";\n        }\n\n        foundTerminator = false;\n\n        endIndex = pattern.lastIndex - 1;\n\n        while(foundTerminator === false && endIndex+1 <= maxIndex) {\n            endIndex = css.indexOf(terminator, endIndex + 1);\n\n            // endIndex == 0 doesn't really apply here\n            if ((endIndex > 0) && (css.charAt(endIndex - 1) !== '\\\\')) {\n                foundTerminator = true;\n                if (\")\" != terminator) {\n                    endIndex = css.indexOf(\")\", endIndex);\n                }\n            }\n        }\n\n        // Enough searching, start moving stuff over to the buffer\n        sb.push(css.substring(appendIndex, m.index));\n\n        if (foundTerminator) {\n\n            token = css.substring(startIndex, endIndex).replace(/(^\\s*|\\s*$)/g, \"\");\n            if (token.slice(0, 19) !== ___PRESERVED_TOKEN_) {\n\n                if (terminator === \"'\" || terminator === '\"') {\n                    token = token.slice(1, -1);\n                } else if (terminator === \")\") {\n                    terminator = \"\";\n                }\n\n                if (options.convertUrls && token.charAt(0) !== SEP && token.slice(0, 7) !== \"http://\" && token.slice(0, 8) !== \"https://\") {\n\n                    // build path of detected urls\n                    target = options.target.slice();\n                    token = token.split(SEP).join(PATH_SEP); // assuming urls in css use \"/\"\n                    url = path.resolve(options.source.join(PATH_SEP), token).split(PATH_SEP);\n\n                    file = url.pop();\n\n                    // remove common part of both paths\n                    while (target[0] === url[0]) {\n                        target.shift();\n                        url.shift();\n                    }\n\n                    for (var i = 0, l = target.length; i < l; ++i) {\n                        target[i] = \"..\";\n                    }\n                    url = terminator + target.concat(url, file).join(SEP) + terminator;\n\n                } else {\n                    url = terminator + token + terminator;\n                }\n\n                preservedTokens.push(url);\n\n                preserver = \"url(\" + ___PRESERVED_TOKEN_ + (preservedTokens.length - 1) + \"___)\";\n                sb.push(preserver);\n\n            } else {\n                sb.push(\"url(\" + token + \")\");\n            }\n\n            appendIndex = endIndex + 1;\n\n        } else {\n            // No end terminator found, re-add the whole match. Should we throw/warn here?\n            sb.push(css.substring(m.index, pattern.lastIndex));\n            appendIndex = pattern.lastIndex;\n        }\n    }\n\n    sb.push(css.substring(appendIndex));\n\n    return sb.join(\"\");\n}\n\n/**\n * Utility method to replace all data urls with tokens before we start\n * compressing, to avoid performance issues running some of the subsequent\n * regexes against large strings chunks.\n *\n * @private\n * @function extractDataUrls\n * @param {String} css The input css\n * @param {Array} The global array of tokens to preserve\n * @returns String The processed css\n */\nfunction extractDataUrls(css, preservedTokens) {\n\n    // Leave data urls alone to increase parse performance.\n    var maxIndex = css.length - 1,\n        appendIndex = 0,\n        startIndex,\n        endIndex,\n        terminator,\n        foundTerminator,\n        sb = [],\n        m,\n        preserver,\n        token,\n        pattern = /url\\(\\s*([\"']?)data\\:/g;\n\n    // Since we need to account for non-base64 data urls, we need to handle\n    // ' and ) being part of the data string. Hence switching to indexOf,\n    // to determine whether or not we have matching string terminators and\n    // handling sb appends directly, instead of using matcher.append* methods.\n\n    while ((m = pattern.exec(css)) !== null) {\n\n        startIndex = m.index + 4;  // \"url(\".length()\n        terminator = m[1];         // ', \" or empty (not quoted)\n\n        if (terminator.length === 0) {\n            terminator = \")\";\n        }\n\n        foundTerminator = false;\n\n        endIndex = pattern.lastIndex - 1;\n\n        while(foundTerminator === false && endIndex+1 <= maxIndex) {\n            endIndex = css.indexOf(terminator, endIndex + 1);\n\n            // endIndex == 0 doesn't really apply here\n            if ((endIndex > 0) && (css.charAt(endIndex - 1) !== '\\\\')) {\n                foundTerminator = true;\n                if (\")\" != terminator) {\n                    endIndex = css.indexOf(\")\", endIndex);\n                }\n            }\n        }\n\n        // Enough searching, start moving stuff over to the buffer\n        sb.push(css.substring(appendIndex, m.index));\n\n        if (foundTerminator) {\n\n            token = css.substring(startIndex, endIndex);\n            var parts = token.split(\",\");\n            if (parts.length > 1 && parts[0].slice(-7) == \";base64\") {\n                token = token.replace(/\\s+/g, \"\");\n            } else {\n                token = token.replace(/\\n/g, \" \");\n                token = token.replace(/\\s+/g, \" \");\n                token = token.replace(/(^\\s+|\\s+$)/g, \"\");\n            }\n\n            preservedTokens.push(token);\n\n            preserver = \"url(\" + ___PRESERVED_TOKEN_ + (preservedTokens.length - 1) + \"___)\";\n            sb.push(preserver);\n\n            appendIndex = endIndex + 1;\n        } else {\n            // No end terminator found, re-add the whole match. Should we throw/warn here?\n            sb.push(css.substring(m.index, pattern.lastIndex));\n            appendIndex = pattern.lastIndex;\n        }\n    }\n\n    sb.push(css.substring(appendIndex));\n\n    return sb.join(\"\");\n}\n\n/**\n * Utility method to compress hex color values of the form #AABBCC to #ABC.\n *\n * DOES NOT compress CSS ID selectors which match the above pattern (which would break things).\n * e.g. #AddressForm { ... }\n *\n * DOES NOT compress IE filters, which have hex color values (which would break things).\n * e.g. filter: chroma(color=\"#FFFFFF\");\n *\n * DOES NOT compress invalid hex values.\n * e.g. background-color: #aabbccdd\n *\n * @private\n * @function compressHexColors\n * @param {String} css The input css\n * @returns String The processed css\n */\nfunction compressHexColors(css) {\n\n    // Look for hex colors inside { ... } (to avoid IDs) and which don't have a =, or a \" in front of them (to avoid filters)\n    var pattern = /(\\=\\s*?[\"']?)?#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])(\\}|[^0-9a-f{][^{]*?\\})/gi,\n        m,\n        index = 0,\n        isFilter,\n        sb = [];\n\n    while ((m = pattern.exec(css)) !== null) {\n\n        sb.push(css.substring(index, m.index));\n\n        isFilter = m[1];\n\n        if (isFilter) {\n            // Restore, maintain case, otherwise filter will break\n            sb.push(m[1] + \"#\" + (m[2] + m[3] + m[4] + m[5] + m[6] + m[7]));\n        } else {\n            if (m[2].toLowerCase() == m[3].toLowerCase() &&\n                m[4].toLowerCase() == m[5].toLowerCase() &&\n                m[6].toLowerCase() == m[7].toLowerCase()) {\n\n                // Compress.\n                sb.push(\"#\" + (m[3] + m[5] + m[7]).toLowerCase());\n            } else {\n                // Non compressible color, restore but lower case.\n                sb.push(\"#\" + (m[2] + m[3] + m[4] + m[5] + m[6] + m[7]).toLowerCase());\n            }\n        }\n\n        index = pattern.lastIndex = pattern.lastIndex - m[8].length;\n    }\n\n    sb.push(css.substring(index));\n\n    return sb.join(\"\");\n}\n\n// Preserve 0 followed by unit in keyframes steps\n\nfunction keyframes(content, preservedTokens) {\n\n    var level,\n        buffer,\n        buffers,\n        pattern = /@[a-z0-9-_]*keyframes\\s+[a-z0-9-_]+\\s*{/gi,\n        index = 0,\n        len,\n        c,\n        startIndex;\n\n    var preserve = function (part, index) {\n        part = part.replace(/(^\\s|\\s$)/g, '');\n        if (part.charAt(0) === '0') {\n            preservedTokens.push(part);\n            buffer[index] = ___PRESERVED_TOKEN_ + (preservedTokens.length - 1) + \"___\";\n        }\n    };\n\n    while (true) {\n\n        level = 0;\n        buffer = '';\n\n        startIndex = content.slice(index).search(pattern);\n        if (startIndex < 0) {\n            break;\n        }\n\n        index += startIndex;\n        startIndex = index;\n        len = content.length;\n        buffers = [];\n\n        for (; index < len; ++index) {\n\n            c = content.charAt(index);\n\n            if (c === '{') {\n\n                if (level === 0) {\n                    buffers.push(buffer.replace(/(^\\s|\\s$)/g, ''));\n\n                } else if (level === 1) {\n\n                    buffer = buffer.split(',');\n\n                    buffer.forEach(preserve);\n\n                    buffers.push(buffer.join(',').replace(/(^\\s|\\s$)/g, ''));\n                }\n\n                buffer = '';\n                level += 1;\n\n            } else if (c === '}') {\n\n                if (level === 2) {\n                    buffers.push('{' + buffer.replace(/(^\\s|\\s$)/g, '') + '}');\n                    buffer = '';\n\n                } else if (level === 1) {\n                    content = content.slice(0, startIndex) +\n                        buffers.shift() + '{' +\n                        buffers.join('') +\n                        content.slice(index);\n                    break;\n                }\n\n                level -= 1;\n            }\n\n            if (level < 0) {\n                break;\n\n            } else if (c !== '{' && c !== '}') {\n                buffer += c;\n            }\n        }\n    }\n\n    return content;\n}\n\n// Collect all comment blocks and return new content with comment placeholders\n// (comments is an array thus passed by reference)\n\nfunction collectComments(content, comments) {\n    var table = [];\n    var from = 0;\n    var start, end;\n    while (true) {\n        start = content.indexOf(\"/*\", from);\n        if (start > -1) {\n            end = content.indexOf(\"*/\", start + 2);\n            if (end > -1) {\n                comments.push(content.slice(start + 2, end));\n                table.push(content.slice(from, start));\n                table.push(\"/*___PRESERVE_CANDIDATE_COMMENT_\" + (comments.length - 1) + \"___*/\");\n                from = end + 2;\n            } else {\n                // unterminated comment\n                end = -2;\n                break;\n            }\n        } else {\n            break;\n        }\n    }\n    table.push(content.slice(end + 2));\n    return table.join(\"\");\n}\n\n// Uglify a CSS string\n\nfunction processString(content, options) {\n\n    var startIndex,\n        comments = [],\n        preservedTokens = [],\n        token,\n        len = content.length,\n        pattern,\n        quote,\n        rgbcolors,\n        hexcolor,\n        placeholder,\n        val,\n        i,\n        c,\n        line = [],\n        lines = [],\n        vars = {};\n\n    options = options || defaultOptions;\n    content = extractDataUrls(content, preservedTokens);\n    content = convertRelativeUrls(content, options, preservedTokens);\n    content = collectComments(content, comments);\n\n    // preserve strings so their content doesn't get accidentally minified\n    pattern = /(\"([^\\\\\"]|\\\\.|\\\\)*\")|('([^\\\\']|\\\\.|\\\\)*')/g;\n    content = content.replace(pattern, function (token) {\n        quote = token.substring(0, 1);\n        token = token.slice(1, -1);\n        // maybe the string contains a comment-like substring or more? put'em back then\n        if (token.indexOf(\"___PRESERVE_CANDIDATE_COMMENT_\") >= 0) {\n            for (i = 0, len = comments.length; i < len; i += 1) {\n                token = token.replace(\"___PRESERVE_CANDIDATE_COMMENT_\" + i + \"___\", comments[i]);\n            }\n        }\n        // minify alpha opacity in filter strings\n        token = token.replace(/progid:DXImageTransform.Microsoft.Alpha\\(Opacity=/gi, \"alpha(opacity=\");\n        preservedTokens.push(token);\n        return quote + ___PRESERVED_TOKEN_ + (preservedTokens.length - 1) + \"___\" + quote;\n    });\n\n    // strings are safe, now wrestle the comments\n    for (i = 0, len = comments.length; i < len; i += 1) {\n\n        token = comments[i];\n        placeholder = \"___PRESERVE_CANDIDATE_COMMENT_\" + i + \"___\";\n\n        // ! in the first position of the comment means preserve\n        // so push to the preserved tokens keeping the !\n        if (token.charAt(0) === \"!\") {\n            if (options.cuteComments) {\n                preservedTokens.push(token.substring(1));\n            } else if (options.uglyComments) {\n                preservedTokens.push(token.substring(1).replace(/[\\r\\n]/g, ''));\n            } else {\n                preservedTokens.push(token);\n            }\n            content = content.replace(placeholder, ___PRESERVED_TOKEN_ + (preservedTokens.length - 1) + \"___\");\n            continue;\n        }\n\n        // \\ in the last position looks like hack for Mac/IE5\n        // shorten that to /*\\*/ and the next one to /**/\n        if (token.charAt(token.length - 1) === \"\\\\\") {\n            preservedTokens.push(\"\\\\\");\n            content = content.replace(placeholder, ___PRESERVED_TOKEN_ + (preservedTokens.length - 1) + \"___\");\n            i = i + 1; // attn: advancing the loop\n            preservedTokens.push(\"\");\n            content = content.replace(\n                \"___PRESERVE_CANDIDATE_COMMENT_\" + i + \"___\",\n                ___PRESERVED_TOKEN_ + (preservedTokens.length - 1) + \"___\"\n            );\n            continue;\n        }\n\n        // keep empty comments after child selectors (IE7 hack)\n        // e.g. html >/**/ body\n        if (token.length === 0) {\n            startIndex = content.indexOf(placeholder);\n            if (startIndex > 2) {\n                if (content.charAt(startIndex - 3) === '>') {\n                    preservedTokens.push(\"\");\n                    content = content.replace(placeholder, ___PRESERVED_TOKEN_ + (preservedTokens.length - 1) + \"___\");\n                }\n            }\n        }\n\n        // in all other cases kill the comment\n        content = content.replace(\"/*\" + placeholder + \"*/\", \"\");\n    }\n\n    if (options.expandVars) {\n        // parse simple @variables blocks and remove them\n        pattern = /@variables\\s*\\{\\s*([^\\}]+)\\s*\\}/g;\n        content = content.replace(pattern, function (ignore, f1) {\n            pattern = /\\s*([a-z0-9\\-]+)\\s*:\\s*([^;\\}]+)\\s*/gi;\n            f1.replace(pattern, function (ignore, f1, f2) {\n                if (f1 && f2) {\n                vars[f1] = f2;\n                }\n                return '';\n            });\n            return '';\n        });\n\n        // replace var(x) with the value of x\n        pattern = /var\\s*\\(\\s*([^\\)]+)\\s*\\)/g;\n        content = content.replace(pattern, function (ignore, f1) {\n            return vars[f1] || 'none';\n        });\n    }\n\n    // normalize all whitespace strings to single spaces. Easier to work with that way.\n    content = content.replace(/\\s+/g, \" \");\n\n    // preserve formulas in calc() before removing spaces\n    pattern = /calc\\(([^;}]*)\\)/g;\n    content = content.replace(pattern, function (ignore, f1) {\n        preservedTokens.push(\n            'calc(' +\n                f1.replace(/(^\\s*|\\s*$)/g, \"\")\n                  .replace(/\\( /g, \"(\")\n                  .replace(/ \\)/g, \")\") +\n            ')'\n        );\n        return ___PRESERVED_TOKEN_ + (preservedTokens.length - 1) + \"___\";\n    });\n\n    // preserve matrix\n    pattern = /\\s*filter:\\s*progid:DXImageTransform.Microsoft.Matrix\\(([^\\)]+)\\);/g;\n    content = content.replace(pattern, function (ignore, f1) {\n        preservedTokens.push(f1);\n        return \"filter:progid:DXImageTransform.Microsoft.Matrix(\" + ___PRESERVED_TOKEN_ + (preservedTokens.length - 1) + \"___);\";\n    });\n\n    // remove the spaces before the things that should not have spaces before them.\n    // but, be careful not to turn \"p :link {...}\" into \"p:link{...}\"\n    // swap out any pseudo-class colons with the token, and then swap back.\n    pattern = /(^|\\})(([^\\{:])+:)+([^\\{]*\\{)/g;\n    content = content.replace(pattern, function (token) {\n        return token.replace(/:/g, \"___PSEUDOCLASSCOLON___\");\n    });\n\n    // remove spaces before the things that should not have spaces before them.\n    content = content.replace(/\\s+([!{};:>+\\(\\)\\],])/g, \"$1\");\n\n    // restore spaces for !important\n    content = content.replace(/!important/g, \" !important\");\n\n    // bring back the colon\n    content = content.replace(/___PSEUDOCLASSCOLON___/g, \":\");\n\n    // preserve 0 followed by a time unit for properties using time units\n    pattern = /\\s*(animation|animation-delay|animation-duration|transition|transition-delay|transition-duration):\\s*([^;}]+)/gi;\n    content = content.replace(pattern, function (ignore, f1, f2) {\n\n        f2 = f2.replace(/(^|\\D)0?\\.?0(m?s)/gi, function (ignore, g1, g2) {\n            preservedTokens.push('0' + g2);\n            return g1 + ___PRESERVED_TOKEN_ + (preservedTokens.length - 1) + \"___\";\n        });\n\n        return f1 + \":\" + f2;\n    });\n\n    // preserve 0% in hsl and hsla color definitions\n    content = content.replace(/(hsla?)\\(([^)]+)\\)/g, function (ignore, f1, f2) {\n        var f0 = [];\n        f2.split(',').forEach(function (part) {\n            part = part.replace(/(^\\s+|\\s+$)/g, \"\");\n            if (part === '0%') {\n                preservedTokens.push('0%');\n                f0.push(___PRESERVED_TOKEN_ + (preservedTokens.length - 1) + \"___\");\n            } else {\n                f0.push(part);\n            }\n        });\n        return f1 + '(' + f0.join(',') + ')';\n    });\n\n    // preserve 0 followed by unit in keyframes steps (WIP)\n    content = keyframes(content, preservedTokens);\n\n    // retain space for special IE6 cases\n    content = content.replace(/:first-(line|letter)(\\{|,)/gi, function (ignore, f1, f2) {\n        return \":first-\" + f1.toLowerCase() + \" \" + f2;\n    });\n\n    // newlines before and after the end of a preserved comment\n    if (options.cuteComments) {\n        content = content.replace(/\\s*\\/\\*/g, \"___PRESERVED_NEWLINE___/*\");\n        content = content.replace(/\\*\\/\\s*/g, \"*/___PRESERVED_NEWLINE___\");\n    // no space after the end of a preserved comment\n    } else {\n        content = content.replace(/\\*\\/\\s*/g, '*/');\n    }\n\n    // If there are multiple @charset directives, push them to the top of the file.\n    pattern = /^(.*)(@charset)( \"[^\"]*\";)/gi;\n    content = content.replace(pattern, function (ignore, f1, f2, f3) {\n        return f2.toLowerCase() + f3 + f1;\n    });\n\n    // When all @charset are at the top, remove the second and after (as they are completely ignored).\n    pattern = /^((\\s*)(@charset)( [^;]+;\\s*))+/gi;\n    content = content.replace(pattern, function (ignore, ignore2, f2, f3, f4) {\n        return f2 + f3.toLowerCase() + f4;\n    });\n\n    // lowercase some popular @directives (@charset is done right above)\n    pattern = /@(font-face|import|(?:-(?:atsc|khtml|moz|ms|o|wap|webkit)-)?keyframe|media|page|namespace)/gi;\n    content = content.replace(pattern, function (ignore, f1) {\n        return '@' + f1.toLowerCase();\n    });\n\n    // lowercase some more common pseudo-elements\n    pattern = /:(active|after|before|checked|disabled|empty|enabled|first-(?:child|of-type)|focus|hover|last-(?:child|of-type)|link|only-(?:child|of-type)|root|:selection|target|visited)/gi;\n    content = content.replace(pattern, function (ignore, f1) {\n        return ':' + f1.toLowerCase();\n    });\n\n    // if there is a @charset, then only allow one, and push to the top of the file.\n    content = content.replace(/^(.*)(@charset \\\"[^\\\"]*\\\";)/g, \"$2$1\");\n    content = content.replace(/^(\\s*@charset [^;]+;\\s*)+/g, \"$1\");\n\n    // lowercase some more common functions\n    pattern = /:(lang|not|nth-child|nth-last-child|nth-last-of-type|nth-of-type|(?:-(?:atsc|khtml|moz|ms|o|wap|webkit)-)?any)\\(/gi;\n    content = content.replace(pattern, function (ignore, f1) {\n        return ':' + f1.toLowerCase() + '(';\n    });\n\n    // lower case some common function that can be values\n    // NOTE: rgb() isn't useful as we replace with #hex later, as well as and() is already done for us right after this\n    pattern = /([:,\\( ]\\s*)(attr|color-stop|from|rgba|to|url|(?:-(?:atsc|khtml|moz|ms|o|wap|webkit)-)?(?:calc|max|min|(?:repeating-)?(?:linear|radial)-gradient)|-webkit-gradient)/gi;\n    content = content.replace(pattern, function (ignore, f1, f2) {\n        return f1 + f2.toLowerCase();\n    });\n\n    // put the space back in some cases, to support stuff like\n    // @media screen and (-webkit-min-device-pixel-ratio:0){\n    content = content.replace(/\\band\\(/gi, \"and (\");\n\n    // remove the spaces after the things that should not have spaces after them.\n    content = content.replace(/([!{}:;>+\\(\\[,])\\s+/g, \"$1\");\n\n    // remove unnecessary semicolons\n    content = content.replace(/;+\\}/g, \"}\");\n\n    // replace 0(px,em,%) with 0.\n    content = content.replace(/(^|[^.0-9\\\\])(?:0?\\.)?0(?:ex|ch|r?em|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|g?rad|turn|m?s|k?Hz|dpi|dpcm|dppx|%)/gi, \"$10\");\n\n    // Replace x.0(px,em,%) with x(px,em,%).\n    content = content.replace(/([0-9])\\.0(ex|ch|r?em|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|g?rad|turn|m?s|k?Hz|dpi|dpcm|dppx|%| |;)/gi, \"$1$2\");\n\n    // replace 0 0 0 0; with 0.\n    content = content.replace(/:0 0 0 0(;|\\})/g, \":0$1\");\n    content = content.replace(/:0 0 0(;|\\})/g, \":0$1\");\n    content = content.replace(/:0 0(;|\\})/g, \":0$1\");\n\n    // replace background-position:0; with background-position:0 0;\n    // same for transform-origin and box-shadow\n    pattern = /(background-position|transform-origin|webkit-transform-origin|moz-transform-origin|o-transform-origin|ms-transform-origin|box-shadow):0(;|\\})/gi;\n    content = content.replace(pattern, function (ignore, f1, f2) {\n        return f1.toLowerCase() + \":0 0\" + f2;\n    });\n\n    // replace 0.6 to .6, but only when preceded by : or a white-space\n    content = content.replace(/(:|\\s)0+\\.(\\d+)/g, \"$1.$2\");\n\n    // shorten colors from rgb(51,102,153) to #336699\n    // this makes it more likely that it'll get further compressed in the next step.\n    pattern = /rgb\\s*\\(\\s*([0-9,\\s]+)\\s*\\)/gi;\n    content = content.replace(pattern, function (ignore, f1) {\n        rgbcolors = f1.split(\",\");\n        hexcolor = \"#\";\n        for (i = 0; i < rgbcolors.length; i += 1) {\n            val = parseInt(rgbcolors[i], 10);\n            if (val < 16) {\n                hexcolor += \"0\";\n            }\n            if (val > 255) {\n                val = 255;\n            }\n            hexcolor += val.toString(16);\n        }\n        return hexcolor;\n    });\n\n    // Shorten colors from #AABBCC to #ABC.\n    content = compressHexColors(content);\n\n    // Replace #f00 -> red\n    content = content.replace(/(:|\\s)(#f00)(;|})/g, \"$1red$3\");\n\n    // Replace other short color keywords\n    content = content.replace(/(:|\\s)(#000080)(;|})/g, \"$1navy$3\");\n    content = content.replace(/(:|\\s)(#808080)(;|})/g, \"$1gray$3\");\n    content = content.replace(/(:|\\s)(#808000)(;|})/g, \"$1olive$3\");\n    content = content.replace(/(:|\\s)(#800080)(;|})/g, \"$1purple$3\");\n    content = content.replace(/(:|\\s)(#c0c0c0)(;|})/g, \"$1silver$3\");\n    content = content.replace(/(:|\\s)(#008080)(;|})/g, \"$1teal$3\");\n    content = content.replace(/(:|\\s)(#ffa500)(;|})/g, \"$1orange$3\");\n    content = content.replace(/(:|\\s)(#800000)(;|})/g, \"$1maroon$3\");\n\n    // border: none -> border:0\n    pattern = /(border|border-top|border-right|border-bottom|border-left|outline|background):none(;|\\})/gi;\n    content = content.replace(pattern, function (ignore, f1, f2) {\n        return f1.toLowerCase() + \":0\" + f2;\n    });\n\n    // shorter opacity IE filter\n    content = content.replace(/progid:DXImageTransform\\.Microsoft\\.Alpha\\(Opacity=/gi, \"alpha(opacity=\");\n\n    // Find a fraction that is used for Opera's -o-device-pixel-ratio query\n    // Add token to add the \"\\\" back in later\n    content = content.replace(/\\(([\\-A-Za-z]+):([0-9]+)\\/([0-9]+)\\)/g, \"($1:$2___QUERY_FRACTION___$3)\");\n\n    // remove empty rules.\n    content = content.replace(/[^\\};\\{\\/]+\\{\\}/g, \"\");\n\n    // Add \"\\\" back to fix Opera -o-device-pixel-ratio query\n    content = content.replace(/___QUERY_FRACTION___/g, \"/\");\n\n    // some source control tools don't like it when files containing lines longer\n    // than, say 8000 characters, are checked in. The linebreak option is used in\n    // that case to split long lines after a specific column.\n    if (options.maxLineLen > 0) {\n        for (i = 0, len = content.length; i < len; i += 1) {\n            c = content.charAt(i);\n            line.push(c);\n            if (c === '}' && line.length > options.maxLineLen) {\n                lines.push(line.join(''));\n                line = [];\n            }\n        }\n        if (line.length) {\n            lines.push(line.join(''));\n        }\n\n        content = lines.join('\\n');\n    }\n\n    // replace multiple semi-colons in a row by a single one\n    // see SF bug #1980989\n    content = content.replace(/;;+/g, \";\");\n\n    // trim the final string (for any leading or trailing white spaces)\n    content = content.replace(/(^\\s*|\\s*$)/g, \"\");\n\n    // restore preserved tokens\n    for (i = preservedTokens.length - 1; i >= 0 ; i--) {\n        content = content.replace(___PRESERVED_TOKEN_ + i + \"___\", preservedTokens[i], \"g\");\n    }\n\n    // restore preserved newlines\n    content = content.replace(/___PRESERVED_NEWLINE___/g, '\\n');\n\n    // return\n    return content;\n}\n\n// Uglify CSS files\n\nfunction processFiles(filenames, options) {\n\n    var nFiles = filenames.length,\n        uglies = [],\n        index,\n        filename,\n        content;\n\n    options = options || defaultOptions;\n\n    if (options.convertUrls) {\n        options.target = path.resolve(process.cwd(), options.convertUrls).split(PATH_SEP);\n    }\n\n    // process files\n    for (index = 0; index < nFiles; index += 1) {\n        filename = filenames[index];\n        try {\n            content = fs.readFileSync(filename, 'utf8');\n            if (content.length) {\n                if (options.convertUrls) {\n                    options.source = path.resolve(process.cwd(), filename).split(PATH_SEP);\n                    options.source.pop();\n                }\n                uglies.push(processString(content, options));\n            }\n        } catch (e) {\n            if (options.debug) {\n                console.error('uglifycss: unable to process \"' + filename + '\"\\n' + e.stack);\n            } else {\n                console.error('uglifycss: unable to process \"' + filename + '\"\\n\\t' + e);\n            }\n            process.exit(1);\n        }\n    }\n\n    // return concat'd results\n    return uglies.join('');\n}\n\nmodule.exports = {\n    defaultOptions: defaultOptions,\n    processString: processString,\n    processFiles: processFiles\n};\n"}